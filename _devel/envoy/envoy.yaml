static_resources:
  listeners:
    - name: listener_http
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 80
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                      log_format:
                        text_format_source:
                          inline_string: "[ACCESS_LOG][%REQ(X-REQUEST-ID)%][%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n"
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /app/logs/access.log
                      log_format:
                        text_format_source:
                          inline_string: "[%REQ(X-REQUEST-ID)%][%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n"
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication"
                      providers:
                        jwt_auth:
                          issuer: jwtdemogo
                          local_jwks:
                            filename: /etc/envoy/jwks/publickey-jwks.txt
                          from_headers:
                            - name: Authorization
                              value_prefix: "Bearer "
                          payload_in_metadata: jwt_payload
                          forward_payload_header: "auth_user"
                      rules:
                        # Not jwt verification is required for POST /v1/jwt-tokens path
                        - match:
                            prefix: "/v1/jwt-tokens"
                        # Jwt verification for jwt_auth is required for all other requests.
                        - match:
                            prefix: "/"
                          requires:
                            provider_name: jwt_auth
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  virtual_hosts:
                    - name: local_routes
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/v1"
                          route:
                            cluster: host30001
                          request_headers_to_add:
                            - header:
                                key: "x-request-id"
                                value: "%REQ(x-amzn-trace-id)%"
                              append: false
                        - match:
                            prefix: "/"
                          response_headers_to_add:
                            - header:
                                key: "Content-Type"
                                value: "application/json"
                          direct_response:
                            status: 403
                            body:
                              inline_string: "{\"code\":\"FORBIDDEN\",\"errorMessage\": \"Invalid routing path\"}"
  clusters:
    - name: host30001
      type: STRICT_DNS
      connect_timeout: 5s
      load_assignment:
        cluster_name: host30001
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 30001
admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901